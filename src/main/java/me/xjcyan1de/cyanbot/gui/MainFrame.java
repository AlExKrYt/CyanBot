package me.xjcyan1de.cyanbot.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import me.xjcyan1de.cyanbot.Player;
import me.xjcyan1de.cyanbot.PlayerManager;
import me.xjcyan1de.cyanbot.logger.PlayerLogger;
import me.xjcyan1de.cyanbot.utils.Schedule;

import javax.swing.*;
import java.awt.*;
import java.util.Map;
import java.util.logging.Logger;

public class MainFrame extends JFrame {
    private JPanel contentPane;
    private JTextArea joinCommands;
    private JTextField ip;
    private JTextField port;
    private JButton join;
    private JTextField name;
    private JTextArea chat;
    private JTextArea logs;
    private JTextField messageText;
    private JButton sendMessage;
    private JScrollPane chatScroll;
    private JScrollPane logsScroll;
    private JButton leave;
    private JTextField status;
    private JRadioButton hasJoin;
    private PlayerManager manager;
    private Logger logger;

    public MainFrame(PlayerManager manager, Logger logger) {
        this.manager = manager;
        this.logger = logger;

        this.setTitle("CyanBot");
        setContentPane(contentPane);
        getRootPane().setDefaultButton(join);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        logger.addHandler(new FormLoggerHandler(logs));

        this.registerListeners();
        this.scheduleUpdateStatus(this, manager);
    }

    private void scheduleUpdateStatus(MainFrame mainFrame, PlayerManager manager) {
        Schedule.timer(() -> {
            final Map<String, Player> playerMap = manager.getPlayerMap();
            boolean connected = playerMap.containsKey(name.getText()) && !playerMap.get(name.getText()).isClose();

            final JTextField status = mainFrame.getStatus();
            if (!connected) {
                status.setText("Не подключен");
                status.setBackground(Color.decode("#ff5050"));
            } else {
                status.setText("Подключен");
                status.setBackground(Color.decode("#33cc33"));
            }

            sendMessage.setEnabled(connected);
            leave.setEnabled(connected);
            join.setEnabled(!connected);
        }, 0, 500);
    }

    public JTextField getStatus() {
        return status;
    }

    public JTextField getUsername() {
        return name;
    }

    private void registerListeners() {
        join.addActionListener(e -> {
            final Player player = new Player(manager, this,
                    new PlayerLogger(name.getText(), logger), name.getText(), ip.getText(), Integer.parseInt(port.getText()));
            manager.connectPlayer(player);
            Schedule.later(() -> {
                for (String cmd : joinCommands.getText().split("\n")) {
                    player.sendMessage(cmd);
                }
            }, 1000);
        });

        leave.addActionListener(e -> {
            final Player player = manager.getPlayer(name.getText());
            if (player != null) {
                manager.disconnectPlayer(player);
            }
        });

        sendMessage.addActionListener(e -> {
            final Player player = manager.getPlayer(name.getText());
            if (player != null) {
                player.sendMessage(messageText.getText());
            }
        });
    }

    public JTextArea getChat() {
        return chat;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(4, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder("Данные"));
        name = new JTextField();
        name.setText("CyanBot");
        panel1.add(name, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        joinCommands = new JTextArea();
        joinCommands.setText("/reg test123 test123\n/login test123");
        panel1.add(joinCommands, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        join = new JButton();
        join.setText("Подключиться");
        panel1.add(join, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        leave = new JButton();
        leave.setEnabled(false);
        leave.setText("Отключиться");
        panel1.add(leave, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        status = new JTextField();
        status.setEditable(false);
        status.setText("Статус");
        panel1.add(status, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder("IP"));
        ip = new JTextField();
        ip.setText("mc.JustVillage.ru");
        panel2.add(ip, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        port = new JTextField();
        port.setText("25565");
        panel2.add(port, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel3.setBorder(BorderFactory.createTitledBorder("Действия"));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel4.setBorder(BorderFactory.createTitledBorder("Чат"));
        sendMessage = new JButton();
        sendMessage.setEnabled(false);
        sendMessage.setText("Сообщение");
        panel4.add(sendMessage, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        messageText = new JTextField();
        messageText.setText("Привет, друзья");
        panel4.add(messageText, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel5, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel5.setBorder(BorderFactory.createTitledBorder("Логи"));
        chatScroll = new JScrollPane();
        panel5.add(chatScroll, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 150), null, 0, false));
        chat = new JTextArea();
        chat.setText("чат");
        chatScroll.setViewportView(chat);
        logsScroll = new JScrollPane();
        panel5.add(logsScroll, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 150), null, 0, false));
        logs = new JTextArea();
        logs.setText("логи\n");
        logsScroll.setViewportView(logs);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
